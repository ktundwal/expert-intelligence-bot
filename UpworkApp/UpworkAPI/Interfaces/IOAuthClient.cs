using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace UpworkAPI.Interfaces
{
    public interface IOAuthClient
    {
        /// <summary>
        /// Get request tokens for upwork applications
        /// </summary>
        /// <returns>OAuthUpworkResponse instance with tokens.</returns>
        Task<OAuthUpworkResponse> GetRequestTokens();

        /// <summary>
        /// Get OAuth 1.0 access token
        /// </summary>
        /// <param name="verifier">Verify code</param>
        /// <returns></returns>
        Task<OAuthUpworkResponse> GetAccessToken(string verifier);

        /// <summary>
        /// Generate OAuth headers, send HTTP Request and return the response
        /// </summary>
        /// <param name="url">Full request url</param>
        /// <param name="data">Request data</param>
        /// <returns>OAuth 1.0 headers string</returns>
        Task<string> SendRequest(string url, string method, Dictionary<string, string> data);

        /// <summary>
        /// Generate request signature.
        /// </summary>
        /// <param name="url">Full request URL</param>
        /// <param name="method">Request method</param>
        /// <param name="data">Request data</param>
        /// <returns>Returns System.String with request signature</returns>
        /// <exception cref="System.ArgumentNullException">Thrown when request data is null</exception>
        string GenerateSignature(string url, string method, Dictionary<string, string> data);

        /// <summary>
        /// Generate the raw OAuth HTML header from the values (including signature).
        /// </summary>
        /// <param name="data">Request Auth data</param>
        /// <returns>System.String with OAuth header</returns>
        /// <exception cref="System.ArgumentNullException">Thrown when Request Auth data is null</exception>
        string GenerateOAuthHeader(Dictionary<string, string> data);

        /// <summary>
        /// Generate an oauth nonce.
        /// </summary>
        /// <remarks>
        ///   <para>
        ///     According to RFC 5849, A nonce is a random string,
        ///     uniquely generated by the client to allow the server to
        ///     verify that a request has never been made before and
        ///     helps prevent replay attacks when requests are made over
        ///     a non-secure channel.  The nonce value MUST be unique
        ///     across all requests with the same timestamp, client
        ///     credentials, and token combinations.
        ///   </para>
        ///   <para>
        ///     One way to implement the nonce is just to use a
        ///     monotonically-increasing integer value.  It starts at zero and
        ///     increases by 1 for each new request or signature generated.
        ///     Keep in mind the nonce needs to be unique only for a given
        ///     timestamp!  So if your app makes less than one request per
        ///     second, then using a static nonce of "0" will work.
        ///   </para>
        ///   <para>
        ///     Most oauth nonce generation routines are waaaaay over-engineered,
        ///     and this one is no exception.
        ///   </para>
        /// </remarks>
        /// <returns>the nonce</returns>
        string GenerateNonce();
    }
}
